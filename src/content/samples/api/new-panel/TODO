1. AddPanel()
   a) "Add Panel" button [Test HTML] --> drops addPanel div on map [TEST JS]
   c) "Panel Object" is added to PanelRegistry[] [TEST JS]
   b) Constructs newPanel --> passes (PanelRegistry.length). All panel elements classes identifiable by panel number
   d) Adding a subpanel? --> maybe start indexing these like 1-2, 3-2, 4-5 etc. First number for parent, next for child
   e) Open/close button API calls
   -End goal: This button will make call to map.addPanel(panel)
   -End goal: map.addPanel has a PanelRegistry[]

2. Panel Constructor
  a) Modify div class names, record them for future use throughout API
  b) Set default width and height
  c) Set id both on panelContent div ad as panel id for future use (if defined)
  d) change panel-template.html --> open/close button should be scoped as BUTTON
  e) Set controls section if defined --> if undefined, pass in array with single closebutton
     --> set controls part of HTML as control
  f) 

3. Control class
  a) getHTML string --> go thru each element add to string
  b)TODO: different orientations
  c) Default top: have elements in a vertical list
  d)check if element is closebutton (specialID) --> if not present, add it



class Panel {
  constructor(control?: Control, id?: string | number): void;
  open(): void;
  close(): void;
  opening: Observable;
  closing: Observable;
  get control(): Control | undefined;
  get content(): (PanelElem | Panel)[];
  set content(item: (PanelElem | Panel)[]): void;
  get id(): string;
  set z-index(number: number): void;
  // returns the panel shell element
  get element(): jQuery<HTMLElement>;
  // position is relative to the maps top and left iff no control object is given,
  // otherwise it is relative to the controls
  position(top?: number, left?: number, bottom?: number, right?: number): void;
  // will never exceed the map edge
  set width(w: string | number): void; // as pixels or percent, 400 default
  // can be pixels, percent, or auto (height to match content)
  // will never exceed the map edge
  set height(h: string | number): void;
}



Also:
  -Proper commenting
  -E6 Guidelines
  -Remove whitespaces
  -Proper commit messages

  //QUESTIONS:
  //Should I include things to remove panel or panel elements?
  //What two panels have same id?


  //TODO:
  //Change to non hardcoded ids to refer to things??????
  //Like to explain better you're doing document.getElementById --> but how to modify THIS instance of panel?
  //Guess could do this._id --> document.getElementById(#ClosePanel) to document.getElementById(this._id + "#ClosePanel")
  //separate API functions from rest of classes
  //Should button click functions be contained within the PanelApi or separated into Javascript? --> is that where observables come in?
  //but in situation where panel ID is undefined?
  //ERROR checking for wrong value type passed through?
  //Could do for MapApi --> keep track of panel number added
  //temporarily keep track of panels in AddPanel function
  //This way don't have to refer to panel buttons/elements by ids --> just by numbers (eg: panelArea1, closeButton1, panelContent1)
  ////QUESTION: to confirm PanelElement is just one element? or is it a collection of elements?
