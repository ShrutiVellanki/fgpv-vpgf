LAYERGROUP TESTS


SETUP
    // set the layer group to a constant for ease of use
    const layerGroup = RZ.mapById('mobile-map').layers;

    // set the layers being tested to a constant for ease of use
    const configLayers = layerGroup.getLayersById('0');

ADD LAYER
    // subscribe to layer added
    layerGroup.layerAdded.subscribe(l => console.log('Layer added'));

    // JSON snippet to be added as a ConfigLayer
    const layerJSON = {
            "id": "0",
            "name": "Liquids Pipeline",
            "layerType": "esriFeature",
            "state": {
            "visibility": true
            },
            "url": "http://geoappext.nrcan.gc.ca/arcgis/rest/services/NACEI/energy_infrastructure_of_north_america_en/MapServer/3"
        };

    // add layer to map
    layerGroup.addLayer(layerJSON);

    // expect 'Layer added' to appear in console

    // test to see if layer added correctly
    layerGroup.contains(0) === true;

ALL LAYERS
    // expect that layers are being added to the group and populating the array
    layerGroup.allLayers.length > 0;

GET LAYERS BY ID
    configLayers.length > 0;

GET LAYERS BY TYPE
    layerGroup.getLayersByType(RZ.LAYERS.ConfigLayer).length > 0;

FETCH ATTRIBUTES
    // subscribe to attributes added
    layerGroup.attributesAdded.subscribe(l => console.log('Attributes added'));

    // download attributes
    configLayers[0].fetchAttributes();

    // expect 'Attributes added' to appear in console

CHANGE ATTRIBUTES
    // subscribe to attributes changed
    layerGroup.attributesChanged.subscribe(l => console.log('Attributes changed'));

    // change single attribute field of layer whose attributes are already downloaded
    configLayers[0].setAttributes(1, 'Country', 'new Country');

    // change all attributes for specific OID of layer whose attributes are already downloaded
    configLayers[0].setAttributes(2, { Country: 'Country is new', OBJECTID: -1 });

    // expect 'Attributes changed' to appear in console

REMOVE ATTRIBUTES / GET ATTRIBUTES
    // subscribe to attributes added
    layerGroup.attributesAdded.subscribe(l => console.log('Attributes added'));

    // subscribe to attributes removed
    layerGroup.attributesRemoved.subscribe(l => console.log('Attributes removed'));

    // remove single attribute field of layer whose attributes are already downloaded
    configLayers[0].removeAttributes(5);

    // expect 'Attributes removed' to appear in the console

    // confirm attribute for OID 5 removed, but others still persist
    configLayers[0].getAttributes(5) === undefined;
    configLayers[0].getAttributes(10) !== undefined;

    // remove all remaining attributes
    configLayers[0].removeAttributes();

    // confirm all attributes are removed by first checking a previously existing attribute was removed
    configLayers[0].getAttributes(10) === undefined;

    // expect getAttributes to return an empty array initially, while fetching attributes
    configLayers[0].getAttributes().length === 0;

    // attributes should have been downloaded again when getAttributes was called
    // expect 'Attributes added' to appear in console

CLICK
    // subscribe to layer click
    layerGroup.click.subscribe(l => console.log('Layer clicked'));

    // click on a layer in the legend on the viewer
    // expect 'Layer clicked' to appear in the console

REMOVE LAYER
    // subscribe to layer removed
    layerGroup.layerRemoved.subscribe(l => console.log('Layer removed'));

    // remove layer from map
    layerGroup.removeLayer(0);

    // expect 'Layer removed' to appear in console after undo timer has expired

    // test to see if layer removed correctly
    layerGroup.contains(0) === false;
